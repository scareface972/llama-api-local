#!/bin/bash

echo "üóëÔ∏è  D√©sinstallation de l'API Llama.cpp"
echo "====================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleur
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  D√©sinstallation Llama API${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_header

# Confirmation de l'utilisateur
echo ""
echo "‚ö†Ô∏è  ATTENTION : Cette action va supprimer :"
echo "   ‚Ä¢ Le service systemd llama-api"
echo "   ‚Ä¢ L'environnement virtuel Python"
echo "   ‚Ä¢ Les mod√®les t√©l√©charg√©s"
echo "   ‚Ä¢ Les logs de l'application"
echo "   ‚Ä¢ Les fichiers de configuration"
echo ""
read -p "√ätes-vous s√ªr de vouloir continuer ? (y/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_warning "D√©sinstallation annul√©e"
    exit 0
fi

# 1. Arr√™t et suppression du service systemd
print_status "Arr√™t du service systemd..."
if systemctl is-active --quiet llama-api; then
    sudo systemctl stop llama-api
    print_status "Service arr√™t√©"
else
    print_warning "Service d√©j√† arr√™t√©"
fi

print_status "D√©sactivation du service..."
sudo systemctl disable llama-api 2>/dev/null || true

print_status "Suppression du fichier service..."
sudo rm -f /etc/systemd/system/llama-api.service

print_status "Rechargement de systemd..."
sudo systemctl daemon-reload

# 2. Suppression des fichiers du projet
print_status "Suppression des fichiers du projet..."

# Sauvegarde des mod√®les si demand√©
if [ -d "models" ] && [ "$(ls -A models 2>/dev/null)" ]; then
    echo ""
    read -p "Voulez-vous sauvegarder les mod√®les avant suppression ? (y/N): " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        BACKUP_DIR="llama_models_backup_$(date +%Y%m%d_%H%M%S)"
        print_status "Sauvegarde des mod√®les dans $BACKUP_DIR..."
        mkdir -p "$BACKUP_DIR"
        cp -r models/* "$BACKUP_DIR/" 2>/dev/null || true
        print_status "Mod√®les sauvegard√©s dans $BACKUP_DIR"
    fi
fi

# Suppression des r√©pertoires et fichiers
print_status "Suppression de l'environnement virtuel..."
rm -rf venv/ 2>/dev/null || true

print_status "Suppression des mod√®les..."
rm -rf models/ 2>/dev/null || true

print_status "Suppression des logs..."
rm -rf logs/ 2>/dev/null || true

print_status "Suppression des fichiers de cache Python..."
find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
find . -name "*.pyc" -delete 2>/dev/null || true
find . -name "*.pyo" -delete 2>/dev/null || true

print_status "Suppression de llama.cpp..."
rm -rf llama.cpp/ 2>/dev/null || true

# 3. Suppression des d√©pendances syst√®me (optionnel)
echo ""
read -p "Voulez-vous supprimer les d√©pendances syst√®me install√©es ? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_status "Suppression des d√©pendances syst√®me..."
    
    # Liste des packages √† supprimer
    PACKAGES_TO_REMOVE=(
        "build-essential"
        "cmake"
        "libopenblas-dev"
        "liblapack-dev"
        "libatlas-base-dev"
        "gfortran"
        "libssl-dev"
        "libffi-dev"
        "libjpeg-dev"
        "libpng-dev"
        "libfreetype6-dev"
        "libxft-dev"
        "pkg-config"
        "libhdf5-dev"
        "libhdf5-serial-dev"
        "libhdf5-103"
        "libqtgui4"
        "libqtwebkit4"
        "libqt4-test"
        "python3-pyqt5"
        "libgtk-3-dev"
        "libavcodec-dev"
        "libavformat-dev"
        "libswscale-dev"
        "libv4l-dev"
        "libxvidcore-dev"
        "libx264-dev"
        "libtiff-dev"
        "libgstreamer1.0-dev"
        "libgstreamer-plugins-base1.0-dev"
        "libgtk2.0-dev"
        "libtiff5-dev"
        "libjasper-dev"
        "libdc1394-22-dev"
        "htop"
        "iotop"
        "nvtop"
    )
    
    for package in "${PACKAGES_TO_REMOVE[@]}"; do
        if dpkg -l | grep -q "^ii  $package "; then
            print_status "Suppression de $package..."
            sudo apt remove --purge -y "$package" 2>/dev/null || true
        fi
    done
    
    # Nettoyage des packages orphelins
    print_status "Nettoyage des packages orphelins..."
    sudo apt autoremove -y
    sudo apt autoclean
else
    print_warning "D√©pendances syst√®me conserv√©es"
fi

# 4. Suppression de CUDA (optionnel)
echo ""
read -p "Voulez-vous supprimer CUDA et les drivers NVIDIA ? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_status "Suppression de CUDA..."
    sudo apt remove --purge -y nvidia-cuda-toolkit nvidia-driver-535 2>/dev/null || true
    sudo apt autoremove -y
    print_warning "Red√©marrage recommand√© apr√®s suppression des drivers NVIDIA"
else
    print_warning "CUDA et drivers NVIDIA conserv√©s"
fi

# 5. Nettoyage des variables d'environnement
print_status "Nettoyage des variables d'environnement..."
if [ -f ~/.bashrc ]; then
    # Suppression des lignes CUDA du .bashrc
    sed -i '/export PATH=\/usr\/local\/cuda/d' ~/.bashrc
    sed -i '/export LD_LIBRARY_PATH=\/usr\/local\/cuda/d' ~/.bashrc
    print_status "Variables d'environnement CUDA supprim√©es"
fi

# 6. Suppression des fichiers temporaires
print_status "Nettoyage des fichiers temporaires..."
rm -f cuda-keyring_*.deb 2>/dev/null || true
rm -f monitor.sh 2>/dev/null || true

# 7. Nettoyage du firewall
print_status "Nettoyage du firewall..."
if command -v ufw &> /dev/null; then
    sudo ufw delete allow 8000/tcp 2>/dev/null || true
    print_status "R√®gle firewall supprim√©e"
fi

# 8. V√©rification finale
print_status "V√©rification de la d√©sinstallation..."

# V√©rification du service
if ! systemctl list-unit-files | grep -q "llama-api"; then
    print_status "‚úÖ Service systemd supprim√©"
else
    print_warning "‚ö†Ô∏è  Service systemd encore pr√©sent"
fi

# V√©rification des fichiers
if [ ! -d "venv" ] && [ ! -d "models" ] && [ ! -d "llama.cpp" ]; then
    print_status "‚úÖ Fichiers du projet supprim√©s"
else
    print_warning "‚ö†Ô∏è  Certains fichiers peuvent encore √™tre pr√©sents"
fi

# 9. R√©sum√© final
echo ""
print_header
echo ""
print_status "D√©sinstallation termin√©e !"
echo ""
echo "üìã R√©sum√© des actions effectu√©es :"
echo "   ‚úÖ Service systemd arr√™t√© et supprim√©"
echo "   ‚úÖ Environnement virtuel Python supprim√©"
echo "   ‚úÖ Mod√®les IA supprim√©s"
echo "   ‚úÖ Logs supprim√©s"
echo "   ‚úÖ Fichiers de cache nettoy√©s"
echo "   ‚úÖ Variables d'environnement nettoy√©es"
echo "   ‚úÖ R√®gles firewall supprim√©es"
echo ""
echo "üí° Recommandations :"
echo "   ‚Ä¢ Red√©marrez votre syst√®me si vous avez supprim√© CUDA"
echo "   ‚Ä¢ V√©rifiez que les ports ne sont plus utilis√©s : sudo lsof -i :8000"
echo "   ‚Ä¢ Consultez les logs syst√®me : sudo journalctl -f"
echo ""
echo "üîÑ Pour r√©installer :"
echo "   ‚Ä¢ Clonez √† nouveau le d√©p√¥t"
echo "   ‚Ä¢ Ex√©cutez : ./install.sh"
echo ""

# 10. Option de suppression compl√®te du r√©pertoire
echo ""
read -p "Voulez-vous supprimer compl√®tement ce r√©pertoire ? (y/N): " -n 1 -r
echo ""

if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_warning "Suppression du r√©pertoire $(pwd)..."
    cd ..
    rm -rf "llma api"
    print_status "R√©pertoire supprim√©"
    echo ""
    print_status "D√©sinstallation compl√®te termin√©e !"
else
    print_status "R√©pertoire conserv√©"
    echo ""
    print_status "Vous pouvez supprimer manuellement le r√©pertoire si n√©cessaire"
fi

echo ""
print_status "Merci d'avoir utilis√© l'API Llama.cpp ! üëã" 