#!/bin/bash

echo "üîß R√©paration de l'installation CUDA"
echo "==================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleur
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fonction de v√©rification d'erreur
check_error() {
    if [ $? -ne 0 ]; then
        print_error "$1"
        return 1
    fi
    return 0
}

# V√©rification de l'utilisateur
if [ "$EUID" -eq 0 ]; then
    print_error "Ne pas ex√©cuter ce script en tant que root"
    print_status "Utilisez un utilisateur normal avec sudo"
    exit 1
fi

print_status "V√©rification de l'environnement..."

# V√©rification de CUDA
print_status "V√©rification de CUDA..."
if command -v nvidia-smi &> /dev/null; then
    print_status "‚úÖ GPU NVIDIA d√©tect√©"
    nvidia-smi --query-gpu=name,driver_version --format=csv,noheader,nounits
else
    print_warning "‚ö†Ô∏è  GPU NVIDIA non d√©tect√©"
    print_status "Ce script est destin√© aux syst√®mes avec GPU NVIDIA"
    exit 1
fi

# Nettoyage des packages cass√©s
print_status "√âTAPE 1: Nettoyage des packages cass√©s..."
sudo apt autoremove -y
sudo apt autoclean
sudo apt --fix-broken install -y
check_error "√âchec de la r√©paration des packages"

# Installation des d√©pendances manquantes
print_status "√âTAPE 2: Installation des d√©pendances manquantes..."
sudo apt install -y \
    libtinfo5 \
    libncurses5 \
    libncurses5-dev \
    libncursesw5 \
    libncursesw5-dev \
    libtinfo-dev \
    libncurses-dev \
    build-essential \
    gcc \
    g++ \
    make
check_error "√âchec de l'installation des d√©pendances"

# Suppression des installations CUDA cass√©es
print_status "√âTAPE 3: Suppression des installations CUDA cass√©es..."
sudo apt remove --purge cuda* nvidia-cuda* -y
sudo apt autoremove -y
sudo apt autoclean

# Nettoyage des fichiers CUDA
print_status "√âTAPE 4: Nettoyage des fichiers CUDA..."
sudo rm -rf /usr/local/cuda*
sudo rm -rf /usr/local/nvidia*
sudo rm -f /etc/apt/sources.list.d/cuda*
sudo rm -f /etc/apt/sources.list.d/nvidia*

# R√©installation propre de CUDA
print_status "√âTAPE 5: R√©installation propre de CUDA..."

# T√©l√©chargement du keyring
print_status "T√©l√©chargement de CUDA keyring..."
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb
check_error "√âchec du t√©l√©chargement de CUDA keyring"

# Installation du keyring
print_status "Installation de CUDA keyring..."
sudo dpkg -i cuda-keyring_1.0-1_all.deb
check_error "√âchec de l'installation de CUDA keyring"

# Mise √† jour des d√©p√¥ts
print_status "Mise √† jour des d√©p√¥ts..."
sudo apt-get update
check_error "√âchec de la mise √† jour des d√©p√¥ts"

# Installation minimale de CUDA (sans les outils de d√©veloppement)
print_status "Installation minimale de CUDA..."
sudo apt-get install -y \
    cuda-compiler-12-0 \
    cuda-libraries-12-0 \
    cuda-libraries-dev-12-0 \
    cuda-runtime-12-0 \
    cuda-toolkit-12-0 \
    --no-install-recommends

if [ $? -ne 0 ]; then
    print_warning "Installation compl√®te √©chou√©e, tentative d'installation de base..."
    sudo apt-get install -y cuda-runtime-12-0 cuda-libraries-12-0
    check_error "√âchec de l'installation de base de CUDA"
fi

# Configuration des variables d'environnement
print_status "√âTAPE 6: Configuration des variables d'environnement..."

# Recherche du r√©pertoire CUDA
CUDA_PATH=""
for path in /usr/local/cuda-12.0 /usr/local/cuda-11.8 /usr/local/cuda; do
    if [ -d "$path" ]; then
        CUDA_PATH="$path"
        break
    fi
done

if [ -n "$CUDA_PATH" ]; then
    print_status "CUDA trouv√© dans : $CUDA_PATH"
    
    # Ajout des variables d'environnement
    if ! grep -q "export PATH=$CUDA_PATH/bin" ~/.bashrc; then
        echo "export PATH=$CUDA_PATH/bin:\$PATH" >> ~/.bashrc
    fi
    
    if ! grep -q "export LD_LIBRARY_PATH=$CUDA_PATH/lib64" ~/.bashrc; then
        echo "export LD_LIBRARY_PATH=$CUDA_PATH/lib64:\$LD_LIBRARY_PATH" >> ~/.bashrc
    fi
    
    # Application imm√©diate
    export PATH="$CUDA_PATH/bin:$PATH"
    export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$LD_LIBRARY_PATH"
    
    print_status "‚úÖ Variables d'environnement configur√©es"
else
    print_warning "‚ö†Ô∏è  R√©pertoire CUDA non trouv√©"
    print_status "Configuration manuelle n√©cessaire"
fi

# V√©rification de l'installation
print_status "√âTAPE 7: V√©rification de l'installation..."

# Test de nvcc
if command -v nvcc &> /dev/null; then
    print_status "‚úÖ nvcc trouv√© : $(nvcc --version | head -1)"
else
    print_warning "‚ö†Ô∏è  nvcc non trouv√©"
fi

# Test de CUDA
if python3 -c "import torch; print('CUDA disponible:', torch.cuda.is_available())" 2>/dev/null; then
    print_status "‚úÖ PyTorch CUDA fonctionnel"
else
    print_warning "‚ö†Ô∏è  PyTorch CUDA non test√©"
fi

print_status "‚úÖ R√©paration CUDA termin√©e !"
echo ""
print_status "Prochaines √©tapes :"
echo "1. Red√©marrez votre terminal ou ex√©cutez : source ~/.bashrc"
echo "2. Testez CUDA : nvcc --version"
echo "3. Relancez l'installation : ./install.sh"
echo "" 